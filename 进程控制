进程控制：进程创建/进程终止/进程等待/程序替换

进程创建：
	pid_t fork()--通过复制父进程，创建子进程
	返回值：  >0
			  <0
			  =0
	创建子进程流程：写时拷贝
	pid_t vfork(void)
	创建一个子进程，但是vfork创建子进程之后父进程会阻塞，直到子进程退出
	或者程序替换，创建的子进程与父进程共用同一个虚拟地址空间-为了防止调
	用栈混乱，因此阻塞父进程
	
	fork 和 vfork 两个接口创建子进程，都是在内核中通过调用 clone函数实现的
	在clone函数中实现tast_struct的创建，以及根据参数的不同，创建拷贝不同的
	数据
	(例如vfork就不需要为子进程创建虚拟地址空间/页表)
	
进程终止：
	进程的终止场景：
		异常退出
		正常退出，结果符合预期：
		正常退出，结果不符合预期：
		
	获取一个系统调用的错误信息：
		void perror(char* msg)  char *strerror(int errno)
		
	如何终止一个进程：
		1.在main函数中return
		2.在任意地方调用 exit(int statu)接口---库函数接口--退出前都会刷新缓冲区
		3.在任意地方调用_exit(int statu)接口---系统调用接口---退出时直接释放所有资源
			
			
进程等待：
		等待子进程的退出，获取子进程的返回值，并且回收子进程的所有资源，避免产生僵尸进程
		如何等待：
				int wait(int* statu);---阻塞接口---等待任意一个子进程退出，若没有子进程退出，则一直等待，直到完成后返回；
				子进程的返回值会放到传入的参数statu中
				
		阻塞:为了完成一个功能，发起调用，若当前不具备完成条件，则一直等待，直到完成后返回；
			
		非阻塞：为了完成一个功能，发起调用，若当前不具备完成条件，则立即报错返回；
		pid_t waitpid(pid_t pid, int *status, int options);
			1.可以等待指定的pid的子进程退出
			2.options若被指定为WNOHANG,则将waitpid设置为非阻塞；
			3.pid = -1  表示等待任意一个子进程的pid;
			pid > 0   表示等待指定的pid的子进程
		返回值 ：
			> 0 返回的是退出子进程的pid
			= 0 表示没有子进程退出
			< 0 等待出错

       函数**perror - print a system error message
SYNOPSIS
       #include <stdio.h>
       void perror(const char *s);
       #include <errno.h>
       const char *sys_errlist[];
       int sys_nerr;
       int errno;
NAME
       _exit, _Exit - terminate(终止) the calling process

SYNOPSIS
       #include <unistd.h>
       void _exit(int status);
       #include <stdlib.h>
       void _Exit(int status);

NAME
       wait, waitpid, waitid - wait for process to change state

SYNOPSIS
       #include <sys/types.h>
       #include <sys/wait.h>
       pid_t wait(int *status);
       pid_t waitpid(pid_t pid, int *status, int options);
       int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options);
	   
The value of options is an OR of zero or more of the following constants:

       WNOHANG     return immediately if no child has exited.

       WUNTRACED   also  return  if  a  child  has  stopped  (but  not  traced   via
                   ptrace(2)).   Status  for  traced  children which have stopped is
                   provided even if this option is not specified.

       WCONTINUED (since Linux 2.6.10)
                   also return if a stopped child has been resumed  by  delivery  of
                   SIGCONT.

程序替换：替换一个进程正在运行的程序
		  进程替换运行的程序后，会初始化虚拟
		  地址空间中的代码段和数据段；并且更
		  新叶表信息
	如何进行程序替换：exec函数族
	
	NAME
       execl, execlp, execle, execv, execvp, execvpe - execute a file

SYNOPSIS
       #include <unistd.h>

       extern char **environ;

       int execl(const char *path, const char *arg, ...);//path：可执行程序文件的路径名 arg:程序的运行参数 ...：不定参数
		   execl("/bin/ls","ls","-l","-a",NULL); (程序替换接口)
			
       int execlp(const char *file, const char *arg, ...);
       int execle(const char *path, const char *arg,..., char * const envp[]);
	   
       int execv(const char *path, char *const argv[]);
		   char* argv[32] = {NULL};
		   argv[0] = "ls";
		   argv[1] = "-a";
		   argv[2] = NULL;
		   execv("/bin/ls",argv);
		   
       int execvp(const char *file, char *const argv[]);
		    char* argv[32] = {NULL};
			argv[0] = "ls";
			argv[1] = "-a";
			argv[2] = NULL;
			execvp("ls",argv);

       int execve(const char *file, char *const argv[],
                   char *const envp[]);
	   l 和 v 的区别：程序的运行参数的赋予方式不同
	   带p 与 不带p的区别：在于第一个参数--可执行程序文件的路径名
	   带e 与 不带e的区别：新程序的环境变量是否由自己来进行赋值
#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>

int main(int argc,char *margv[],char *env[])
{
    //execl("/bin/ls","ls","-l","-a",NULL);
    char* argv[32] = {NULL};
    argv[0] = "ls";
    argv[1] = "-a";
    argv[2] = NULL;
	//子进程的环境变量实际上是由父进程给的
    if(execve("./env",argv,env) < 0)
    {
        perror("execv error");
        return -1;
    }
    printf("xixi qwq \n");
    return 0;
}
minishell:
	非常简单的shell--能够接收用户的输入，并且针对这些输入完成响应的功能
	  shell(命令行解释器)
1.一直等待标准输入(比如输入：ls -l)----fgets(stdin)  scanf("\n",buf);
2.对输入进行解析，得到程序名称及运行参数
(shell对自己进行程序替换的话则运行完命令后shell就退出了，
这是不合理的，因此有了3.)
3.创建子进程
4.将子进程程序替换成为指定命令对应的程序
5.父进程等待子进程退出

#include<stdio.h>
#include<string.h>
#include<unistd.h>
#include<stdlib,h>
#include<errno.h>
#include<ctype.h>
#include<sys/wait.h>

int main()
{
    while(1)
    {
		//获取
		printf("[pussycat-doll@localhost ~]$ ");
		fflush(stdout);//刷新缓冲区
        char buf[1024] = {0};
        fgets(buf,1023,stdin);//从标准输入获取用户敲击的命令，1024放字符串结束标志‘\0’
		buf[strlen(buf) - 1] = '\0';//字符串结尾标志
		printf(“cmd:[%s]\n",buf);
		
		//解析
		int argc = 0;
		char *ptr = buf;
		char *argv[32] = {NULL};
		while(*ptr != '\0')
		{
			if(!isspace(*ptr))
			{
				argv[argc] = ptr;
				argc++;
				while(!isspace(*ptr) && *ptr != '\0')
				{
					ptr;
				}
				*ptr = '\0';
			}
			ptr++;
		}
		argv[argc] = NULL;
		int i = 0;
		for(i = 0; i < argc; ++i)
		{
			printf("[%s]\n",argv[i]);
		}
		
		//创建子进程，进行程序替换，让子进程运行ls
		int pid = fork();
		if( pid == 0)
		{
			execvp[argv[0],argv);
			exit(0);
		}
		//让父进程进行进程等待
		waitpid(-1,NULL,0);
    }
    return 0;
}

	
	
	
	
	
	
	
	
	
	
	
	
	
	