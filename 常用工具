常用工具：
	软件包管理工具：yum
		查看软件包：yum list
		安装软件包:	yum install lrzsz(文件传输命令)
					yum install gcc
					yum install gcc-c++
					yum install gdb
					yum install git
		移除软件包	yum remove package_name
	写代码相关工具：编辑器/编译器/调试器
	编辑器vim
				1.模式
					实际有12种，常见的有三种-普通模式 插入模式 底行模式
					所有的模式打开都是围绕普通模式切换的
					vim 打开一个文件默认就是处于普通模式的
					模式切换： 
						i/a/I/A 由普通模式换到插入模式
						Esc键   由插入模式换到普通模式
						Esc键	由底行模式切换到普通模式
						:		由普通模式切换到底行模式

				2.常见指令操作
					光标移动:
						←↓↑→    hjkl
						ctrl+b 向下翻页
						ctrl+f 向上翻页
						gg 跳转文件开头行
						GG 跳转文件末尾行
						w/b 按照单词左右移动
					增删查改:
						yy/nyy  复制
						p(小写) 向光标所在行下方粘贴
						P(大写) 向光标所在行上方粘贴
						dd/ndd  删除
						x       删除光标所在字符
						d/w		删除单词所在单词
						u 		撤销
					其他操作
						Crtl+r  撤销撤销多的
						gg = G  全文对齐
	编译器：gcc/g++
	编译过程
		将用户所写的高级语言代码解释称为机器可识别指令。
		预处理：展开所有代码  gcc -E
		编译：语义语法纠错，若没有错误，则将高级语言解释称为汇编语言 gcc -S
		汇编：将汇编语言解释称为机器指令 gcc -c
		链接：将所有文件代码以及库文件中代码打包成为可执行程序
			
			静态链接：链接生成可执行程序时，直接将库中的代码拷贝一份到可执行程序中。
				1.可以不依赖文件的存在，库文件被删除时依然可以运行；
				2.若库文件被大量的程序使用，则会造成大量的内存中代码冗余；
				
			动态链接：链接生成可执行程序时，并不拷贝代码，只是在可执行程序中记录函数的位置附号信息。等到运行的时候
					  将库加载到内存中，并且多个程序可以共同享用。
				1.节省资源，内存中共用一份
				2.程序运行时，库文件必须存在
			静态链接链接的是静态库，动态链接链接的是动态库；
			
		编译语句：
	调试器：gdb
			调试前提：使用gcc生成debug版可执行程序（gcc 默认生成release版程序）
			gcc -g test.c -o test
			gdb ./main 加载程序调试
			gdb 调试通过命令完成整个程序的调试过程
			逐步调试：start-开始调试  list-下一步(不进入函数) next-下一个函数
					  step-下一步(跟踪进入)  continue-从当前位置开始直接运行程序
					  until-直接运行到指定行停下   对于不同文件-  until filename:linenumber
					  run 直接运行
			断点调试：
					  break main.c:10 
					  info break 查看断点信息   delete-删除断点
					  watch-watch variable_name 变量监控  print-打印变量内容
			其他调试：
					  backtrace  当程序崩溃位置（查看函数调用栈）
	项目管理工具：项目构建工具/项目的版本管理工具
	项目构建工具：make/MAkefile
				  MAkefile：是一个普通的文本文件，又有一点不普通，这个文件中记录的是一个项目的所有构建规则
				  make:是一个解释程序，在执行make命令的时候，会到当前目录下寻找MaKefile文件，然后，对MaKefile中记录
				  的构建规则进行逐行解释执行，最终完成整个项目的构建
				  MAkefile编写规则：
					目标对象:依赖对象
					[\t]为了生成目标对象所执行的命令语句
					预定义变量：
						$^：所有的依赖对象内容
						$<：依赖的对象中的一个
						$@: 目标对象的内容
						//src=$(wildcard ./*.c)获取当前目录下所有以.c结尾的文件名放到src变量中
				  MAke解释执行规则：
					从上往下找到第一个目标对象，生成后，则退出;
					main.o:main.c
						gcc -c  $^ -o $@      
					child.o:child.c
						gcc -c  $^ -o $@	这个makefile只能生成一个Main.o就退出了
					main:main.o child.o
						gcc  $^ -o $@
						
						
					main:main.o child.o     1.依赖两个.o生成main
						gcc  $^ -o $@		2.两个.o都不存在
					main.o:main.c			3.在下方继续找依赖对象（.o文件）的生成规则
						gcc -c  $^ -o $@    4.先生成依赖对象，然后最终再来生成目标对象 
					child.o:child.c
						gcc -c  $^ -o $@	

		伪对象：.PHONY：target_name 声明伪对象，不管这个目标对象是否存在最新，每次都要重新生成

	
	git的三板斧:
		从服务器上克隆一个项目-git clone https://
		本地的版本提交：git add ./* git commit -m "本次提交的备注信息"
		远程服务器的提交：git push orgin master
	
	
	